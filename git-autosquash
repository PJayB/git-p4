#/bin/bash
#
# A utility to squash all commits into a single commit on another branch.
#
# All commits since the specified commit or branch will be squashed into
# a branch called "squashed/<current-branch>" (unless specified with the second
# command line argument). If this branch doesn't exist, a new commit will be
# made. If the branch exists, the commit is replaced (but retains the original
# commit message.)
#
set -e
die() { echo "$*" >&2 ; exit 1 ; }

usage() {
    echo "Usage: $0 [<options...>] <base branch> [<new branch>]

Options:
    --force             Force create a new branch, even if it exists
    -m <message>        The commit message to use
    -F <file>           The file to read the commit message from
    -r                  Reword the existing commit message

    <base branch>       The merge base of the current branch, e.g. 'main'
    <new branch>        The name of the squashed branch (default:
                        'squashed/<current branch name>')
"
}

git_commit_args=( )
git_steal_commit_msg=yes
git_edit_commit_msg=no
force_new_branch=no
while [[ $1 =~ ^-.* ]]; do
    case "$1" in
    -m|-F)      git_commit_args+=( "$1" "$2" )
                git_steal_commit_msg=no
                git_edit_commit_msg=no
                shift ;;
    -r)         git_commit_args=( )
                git_steal_commit_msg=yes
                git_edit_commit_msg=yes ;;
    --force)    force_new_branch=yes ;;
    --help)     usage ; exit 0 ;;
    --)         shift ; break ;;
    *)          usage ; exit 1 ;;
    esac
    shift
done

main_branch="$1"
if [ -z "$main_branch" ]; then
    usage
    exit 1
fi

if ! git rev-parse --verify "$main_branch" >/dev/null 2>&1 ; then
    die "'$main_branch' isn't a git branch."
fi

current_branch="$(git branch --show-current)"
new_branch="${2:-squashed/$current_branch}"

merge_base="$(git merge-base "$main_branch" "$current_branch")"
if [ -z "$merge_base" ]; then
    die "Couldn't find merge base between '$main_branch' and '$current_branch'"
fi

# Ensure this branch has at least one commit in it
commit_diffs="$(git rev-list "$main_branch..$current_branch")"
if [ -z "$commit_diffs" ]; then
    die "'$current_branch' doesn't have any commits."
fi

# Restore current branch after exiting
trap "git switch '$current_branch' 2>/dev/null || \
    die 'Failed to switch back to $current_branch'" EXIT

# If the branch exists, take the commit message from it
if [ "no" = "$force_new_branch" ] && \
    git rev-parse --verify "$new_branch" >/dev/null 2>&1
then
    # Existing branch
    git switch "$new_branch"

    # Ensure the branch has at least one commit in it
    readarray -t original_commits < <(git rev-list "$main_branch..$new_branch")
    if [[ ${#original_commits[@]} = 0 ]]; then
        die "'$new_branch' doesn't have any commits. Delete the branch first."
    elif [[ ${#original_commits[@]} > 1 ]]; then
        die "'$new_branch' already has too many commits in it. Aborting."
    fi

    # Reset to current branch
    git reset --hard "$current_branch"

    # Reset to the start point
    git reset --soft "$merge_base"

    # Make a new commit
    if [ "$git_steal_commit_msg" = "yes" ]; then
        git_commit_args+=( --reuse-message="${original_commits[@]}" )
    fi
    if git commit "${git_commit_args[@]}"; then
        echo "Squashed to existing branch '$new_branch'"
    else
        exit 1
    fi
else
    # New branch
    if [ "$git_steal_commit_msg" = "yes" ]; then
        # Get the commit message from the current branch
        git_commit_args+=( --reuse-message="${current_branch[@]}" )
        # Force this on, as it's likely we'll want to edit this
        git_edit_commit_msg=yes
    else
        # Force this off, as 'git commit' will do it anyway
        git_edit_commit_msg=no
    fi
    git switch -C "$new_branch"
    git reset --soft "$merge_base"
    if git commit "${git_commit_args[@]}"; then
        echo "Squashed to new branch '$new_branch'"
    else
        exit 1
    fi
fi

# Edit the commit message?
if [ "yes" = "$git_edit_commit_msg" ]; then
    git commit --amend
fi
